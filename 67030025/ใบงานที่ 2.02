คำถาม 1.1 
ทำไม 10 / 3.0 (เมื่อตัวหารเป็น float หรือ double) ถึงได้ผลลัพธ์เป็นทศนิยม
แต่เมื่อตัวหารถูกแปลงเป็น int แล้วผลลัพธ์เป็นจำนวนเต็ม?

ตอบ:
เพราะว่าเมื่อมีการคำนวณระหว่าง ชนิดข้อมูลต่างกัน (เช่น int กับ float หรือ double)
ระบบจะทำการแปลง (Type Promotion) ให้เป็นชนิดที่มีความแม่นยำสูงกว่าโดยอัตโนมัติ เช่น:

int / float → แปลง int เป็น float → ได้ผลลัพธ์แบบทศนิยม

int / double → แปลง int เป็น double → ได้ผลลัพธ์แบบทศนิยม

int / (int) → คำนวณแบบจำนวนเต็มล้วน → ทศนิยมจะถูก ตัดทิ้ง (ไม่ปัด)

 คำถาม 2
ถาม:
ในการเขียนโปรแกรม ต้องทำ Type Casting (การแปลงชนิดข้อมูล) ในสถานการณ์ใดบ้าง?

ตอบ:
ต้องทำ Type Casting เมื่อ
1. ต้องการควบคุมรูปแบบผลลัพธ์ในการคำนวณ
เช่น หารสองตัวแปร int แต่ต้องการผลลัพธ์แบบ float:

float avg = (float)count / total;  // ต้องแปลงก่อนหาร ไม่เช่นนั้นจะได้ค่า int


2. แปลงค่าจาก float/double เป็น int เพื่อตัดทศนิยมออก
ใช้เมื่อ:

ต้องการค่าจำนวนเต็มเท่านั้น

ไม่ต้องการปัดเศษ (แต่ตัดทิ้งทันที)

int temp = (int)25.789;  // ได้ค่า 25


3. แปลง char เป็น ASCII (int) หรือในทางกลับกัน
ใช้เมื่อต้องการตรวจสอบค่าตัวอักษรในเชิงเลข:

char c = 'A';
int ascii = (int)c;  // ได้ค่า 65


4. แปลงค่าให้ตรงกับประเภทของพารามิเตอร์ในฟังก์ชัน
เช่น ฟังก์ชันรับ float แต่เรามีค่า int → ควร cast ก่อนส่งเข้า:

float result = sqrt((float)16);


5. ป้องกันข้อผิดพลาดหรือผลลัพธ์ที่ไม่คาดคิด
เช่น ป้องกัน overflow หรือ underflow จากการคำนวณข้ามชนิดข้อมูล
