1. int และ sizeof()
1.1
int บน ESP32 ใช้ 4 ไบต์ หรือ 32 บิต

1.2
เมื่อค่าเกินขอบเขตของ int (±2,147,483,647):

จะเกิด Overflow หรือ Underflow

ค่าจะ “วนกลับ” ไปอีกฝั่ง เช่น

2147483647 + 1 ได้ -2147483648

-2147483648 - 1 ได้ 2147483647


2. float และ double
ขนาดของ float และ double บน ESP32:

float = 4 ไบต์

double = 8 ไบต์

ความแม่นยำ:

float แสดงค่าทศนิยมได้ ~6–7 ตำแหน่ง

double แสดงได้ ~15 ตำแหน่ง

ควรใช้ double แทน float เมื่อ:

ต้องการความแม่นยำสูง เช่น พิกัด GPS, คำนวณวิทยาศาสตร์

แต่หากเน้นประหยัดหน่วยความจำ ใช้ float แทนได้


3. char และ sizeof()
char ใช้:

1 ไบต์

ASCII คืออะไร?:

ตัวอักษรจะถูกแปลงเป็นรหัสตัวเลขตาม ตาราง ASCII

เช่น 'Z' = 90, 'z' = 122


4. bool และ sizeof()
bool ใช้:

1 ไบต์ (แม้จะเก็บแค่ 0 หรือ 1 ก็ตาม)

ผลลัพธ์ใน Serial Monitor:

true → แสดงเป็น 1

false → แสดงเป็น 0


5. long, long long, unsigned types และ sizeof()
ชนิดข้อมูล	              ขนาด (ไบต์)
long	                      4
long long	                  8
unsigned int	              4
unsigned long	              4
unsigned long long	        8


6. byte และ sizeof()
byte ใช้:

1 ไบต์

เมื่อ myByte = 256:

เกินขอบเขต (0–255)

จะเกิด Overflow → วนกลับเป็น 0 (256 % 256 = 0)


7. Type Promotion (การคำนวณข้ามชนิด)
คำถาม:
ทำไม 10 / 3.0 (float/double) ได้ทศนิยม แต่ (int)3.0 แล้วผลลัพธ์เป็นจำนวนเต็ม?

คำตอบ:

เมื่อมีการคำนวณระหว่าง int กับ float หรือ double, C จะทำ Type Promotion:

int ถูกแปลงเป็น float หรือ double โดยอัตโนมัติ

ได้ผลลัพธ์เป็นค่าทศนิยม

แต่เมื่อแปลง 3.0 เป็น int แล้ว → คำสั่ง 10 / 3 จะใช้การหารแบบจำนวนเต็ม → ตัดเศษทิ้ง (ไม่ปัด)


8. Explicit Type Casting
คำถาม:
นักศึกษาจะใช้ Type Casting ในสถานการณ์ใดบ้าง?

คำตอบ:

ใช้เมื่อ:
1.ต้องการแปลง float เป็น int → ตัดทศนิยมออก

int temp = (int)25.789;  // ได้ 25

2.ต้องการให้หารแล้วได้ทศนิยม

float avg = (float)count / total;

3.แปลง char เป็นค่า ASCII หรือกลับกัน

int ascii = (int)'A';  // ได้ 65

4.แปลงค่าก่อนส่งให้ฟังก์ชันที่รองรับเฉพาะชนิดข้อมูลบางแบบ

5.ป้องกัน Overflow/Underflow หรือผลลัพธ์ผิดพลาดในการคำนวณข้ามชนิดข้อมูล
