สรุปผลการทดลอง

จากการทดลอง นักศึกษาได้เรียนรู้เกี่ยวกับชนิดข้อมูลพื้นฐานในภาษา C ที่ใช้งานบน ESP32 ได้แก่ int, float, char, bool, long, long long, unsigned int, byte, และ double โดยใช้คำสั่ง sizeof() 
เพื่อตรวจสอบขนาดของแต่ละชนิดข้อมูล ซึ่งช่วยให้เข้าใจการใช้หน่วยความจำของแต่ละชนิดอย่างชัดเจน และยังได้ทดลองเห็นผลของ Overflow, Underflow และความแม่นยำของชนิดข้อมูลที่ใช้จัดเก็บค่าทศนิยม เช่น 
float และ double อีกด้วยนอกจากนี้ยังได้ฝึกการ Type Promotion (การคำนวณระหว่างชนิดข้อมูลต่างกัน) และ Type Casting (การแปลงชนิดข้อมูล) เพื่อควบคุมผลลัพธ์ในการประมวลผลให้เหมาะสมตามที่ต้องการ


คำถามท้ายการทดลอง

1. นักศึกษาได้เรียนรู้อะไรบ้างเกี่ยวกับความแตกต่างและคุณสมบัติของชนิดข้อมูลแต่ละประเภทบน ESP32?
คำตอบ:
ได้เรียนรู้ว่าแต่ละชนิดข้อมูลมีขนาดไม่เท่ากัน เช่น:

int, long, unsigned int → 4 ไบต์ (32-bit)

long long, unsigned long long → 8 ไบต์ (64-bit)

float → 4 ไบต์ แต่มีความแม่นยำต่ำกว่า double (8 ไบต์)

char, bool, byte → 1 ไบต์
แต่มีหน้าที่และการใช้งานที่ต่างกัน เช่น bool เก็บค่า true/false, char เก็บตัวอักษร, byte เหมาะกับค่าระหว่าง 0-255

2. ความสำคัญของการเลือกใช้ชนิดข้อมูลที่เหมาะสมในการเขียนโปรแกรมคืออะไร?
คำตอบ:
ช่วยให้:

ประหยัดหน่วยความจำ (โดยเฉพาะในไมโครคอนโทรลเลอร์ที่มี RAM น้อย)

ป้องกันการเกิด Overflow/Underflow

เพิ่มประสิทธิภาพการทำงาน

ทำให้โปรแกรมอ่านง่ายและปลอดภัยจากข้อผิดพลาดด้านข้อมูล

3. ถ้านักศึกษาต้องการเก็บค่าเวลา (เป็นมิลลิวินาที) ซึ่งอาจมีค่าสูงถึงหลายพันล้านมิลลิวินาที นักศึกษาควรใช้ชนิดข้อมูลใดบน ESP32?
คำตอบ:
ควรใช้ unsigned long หรือ unsigned long long

unsigned long เก็บได้ถึง ~4,294,967,295

ถ้าเกินนั้นควรใช้ unsigned long long (เก็บได้ถึง ~1.8×10¹⁹)

4. อธิบายความแตกต่างระหว่าง float และ double ในแง่ของขนาดหน่วยความจำและความแม่นยำ
คำตอบ:

  ชนิดข้อมูล	        ขนาด (ไบต์)	              ความแม่นยำโดยประมาณ
    float	              4	                     6-7 ตำแหน่งทศนิยม
    double	            8	                     15 ตำแหน่งทศนิยม
  
ดังนั้น double แม่นยำกว่าแต่ใช้หน่วยความจำมากกว่า ควรใช้ในกรณีที่ต้องการความละเอียดสูง

5. อธิบายแนวคิดเรื่อง "Overflow" และ "Underflow" ที่เกิดขึ้นกับชนิดข้อมูลจำนวนเต็ม พร้อมยกตัวอย่างจากใบงานนี้
คำตอบ:

Overflow: เมื่อค่ามากเกินขอบเขตบนของชนิดข้อมูล → ค่า "วนกลับ" ไปยังค่าต่ำสุด
เช่น int myInteger = 2147483647 + 1; → ได้ -2147483648

Underflow: เมื่อค่าน้อยเกินขอบเขตล่างของชนิดข้อมูล → ค่า "วนกลับ" ไปยังค่าสูงสุด
เช่น myInteger = -2147483648 - 1; → ได้ 2147483647

6. การทราบขนาดของชนิดข้อมูลด้วย sizeof() มีประโยชน์อย่างไรในการเขียนโปรแกรมสำหรับไมโครคอนโทรลเลอร์ที่มีหน่วยความจำจำกัด?
คำตอบ:
ช่วยให้:

เลือกชนิดข้อมูลได้เหมาะสมกับงานและขนาดข้อมูลจริง

ไม่เปลืองหน่วยความจำเกินความจำเป็น

ป้องกันการเกิดปัญหา overflow/underflow

ทำให้โปรแกรมทำงานเร็วขึ้นและเสถียรมากขึ้น
