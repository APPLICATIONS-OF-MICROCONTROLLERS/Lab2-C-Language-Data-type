Lab02-03_Size_of_Variable
1.1 int บน ESP32 ใช้กี่ไบต์?
บน ESP32 ตัวแปร int ใช้ 4 ไบต์ หรือ 32 บิต
1.2 จากผลลัพธ์ นักศึกษาสังเกตเห็นอะไรเมื่อค่าเกินขอบเขตของ int บน ESP32?
เมื่อค่าที่เก็บใน int เกินขอบเขต (มากกว่า 2,147,483,647 หรือ น้อยกว่า -2,147,483,648) จะเกิด Overflow หรือ Underflow ทำให้ค่ากลับไปยังขอบเขตอีกด้าน เช่น จากค่าบวกกลายเป็นค่าลบทันที หรือค่าลบกลายเป็นค่าบวก ซึ่งเป็นพฤติกรรมของการเก็บข้อมูลแบบวนรอบในหน่วยความจำ

-float และ double บน ESP32 ใช้กี่ไบต์ตามลำดับ?
บน ESP32 ตัวแปร float ใช้พื้นที่ 4 ไบต์ (32 บิต)
ตัวแปร double ใช้พื้นที่ 8 ไบต์ (64 บิต)
-นักศึกษาสังเกตเห็นความแตกต่างของความแม่นยำระหว่าง float และ double อย่างไร? สถานการณ์ใดที่คุณควรเลือกใช้ double แทน float?
float เก็บค่าทศนิยมได้ประมาณ 7 ตำแหน่ง เช่น Pi ≈ 3.14159274
double แม่นยำสูงกว่า เก็บได้ถึง 15 ตำแหน่ง เช่น Pi ≈ 3.141592653589793
จึงควรเลือกใช้ double ในสถานการณ์ที่ต้องการความละเอียดสูง เช่น
คำนวณเชิงวิทยาศาสตร์
ประมวลผลข้อมูลเซนเซอร์ที่มีความละเอียด เช่น GPS หรือ IMU
งานที่ต้องการลดความคลาดเคลื่อนจากการปัดเศษ

-char ใช้กี่ไบต์? ค่าตัวเลข (ASCII value) มีความสัมพันธ์กับอักขระอย่างไร?
บน ESP32 ตัวแปรชนิด char ใช้พื้นที่ 1 ไบต์ หรือ 8 บิต ซึ่งเพียงพอสำหรับเก็บอักขระหนึ่งตัวจากชุดรหัส ASCII โดยตรง โดยแต่ละอักขระจะมี ค่าตัวเลขเฉพาะที่เรียกว่า ASCII value ซึ่งเป็นตัวแทนของอักขระนั้นในรูปแบบเลขฐานสิบ เช่น 'Z' มีค่า ASCII เป็น 90 และ 'z' มีค่าเป็น 122 ดังนั้นเมื่อเราแปลง char เป็น int จะสามารถดูค่าตัวเลขที่แทนอักขระนั้นได้ และในทางกลับกัน หากกำหนดค่าตัวเลขให้กับ char เช่น char c = 122; ก็จะได้อักขระ 'z' กลับมา ซึ่งแสดงถึงความสัมพันธ์แบบหนึ่งต่อหนึ่งระหว่างตัวเลขและอักขระในระบบ ASCII
-bool ใช้กี่ไบต์? true และ false ถูกแสดงผลเป็นค่าใดบน Serial Monitor?
บน ESP32 ตัวแปรชนิด bool ใช้พื้นที่ 1 ไบต์ หรือ 8 บิต ซึ่งแม้ว่าในทางทฤษฎีจะใช้แค่ 1 บิตก็พอสำหรับค่า true กับ false แต่ในทางปฏิบัติ หน่วยความจำขั้นต่ำที่สามารถเข้าถึงได้คือ 1 ไบต์ จึงต้องใช้เต็มไบต์ในการจัดเก็บ
เมื่อแสดงผลผ่าน Serial Monitor:
- true จะแสดงเป็น 1
- false จะแสดงเป็น 0

-ชนิดข้อมูลจำนวนเต็มแต่ละชนิด (long, long long, unsigned int, unsigned long, unsigned long long) ใช้กี่ไบต์บน ESP32?
บน ESP32 ซึ่งเป็นระบบแบบ 32 บิต ตัวแปร int และ long มีขนาดเท่ากันคือ 4 ไบต์ (32 บิต), ส่วน long long มีขนาด 8 ไบต์ (64 บิต) ให้ขอบเขตกว้างขึ้นสำหรับจำนวนเต็มขนาดใหญ่ ส่วนชนิดข้อมูลแบบไม่มีเครื่องหมาย (unsigned) เช่น unsigned int, unsigned long ก็ยังใช้ 4 ไบต์เช่นกันแต่เก็บเฉพาะค่าบวกได้ถึงประมาณ 4.29 พันล้าน และ unsigned long long ซึ่งใช้ 8 ไบต์สามารถเก็บค่าบวกได้สูงสุดถึงประมาณ 18.4 ควอแดรลเลียน ซึ่งมากที่สุดในกลุ่มนี้
-บน ESP32, long มีขอบเขตเท่ากับ int หรือไม่? ชนิดข้อมูลใดที่คุณจะใช้หากต้องการเก็บค่าจำนวนเต็มบวกที่ใหญ่ที่สุด?
บน ESP32 ค่าของ long มีขอบเขตและขนาดเท่ากับ int คือทั้งสองเป็นชนิด 32 บิตที่สามารถเก็บค่าตั้งแต่ -2,147,483,648 ถึง 2,147,483,647 ดังนั้นไม่มีความแตกต่างในการใช้งานทั่วไประหว่างสองชนิดนี้บนแพลตฟอร์มนี้ หากต้องการเก็บค่าจำนวนเต็มบวกที่มีค่ามากที่สุด จึงควรเลือกใช้ unsigned long long ซึ่งสามารถเก็บได้ถึง 18,446,744,073,709,551,615 โดยไม่ต้องกังวลเรื่องการ Overflow หรือการใช้หน่วยความจำเกินจำเป็น

-byte ใช้กี่ไบต์? เมื่อ myByte ถูกกำหนดให้เป็น 256 ผลลัพธ์ที่ได้คืออะไร และเพราะเหตุใด?
บน ESP32 ตัวแปรชนิด byte ใช้พื้นที่ 1 ไบต์ หรือ 8 บิต ซึ่งสามารถเก็บค่าได้ตั้งแต่ 0 ถึง 255 รวมทั้งหมด 256 ค่า ที่เป็นไปได้
เมื่อกำหนด myByte = 256; จะเกิด Overflow เพราะ 256 เกินขอบเขตที่ byte รองรับได้ (สูงสุดคือ 255) ทำให้ค่าถูกวนกลับไปเริ่มต้นใหม่ที่ 0 ซึ่งเป็นพฤติกรรมของการเก็บข้อมูลแบบ วนรอบ (wrap-around) ในระบบเลขฐานสองของไมโครคอนโทรลเลอร์
ดังนั้นผลลัพธ์ที่แสดงบน Serial Monitor จะเป็น 0 เพราะ 256 % 256 = 0

-ทำไม 10 / 3.0 (เมื่อตัวหารเป็น float หรือ double) ถึงได้ผลลัพธ์เป็นทศนิยม แต่เมื่อตัวหารถูกแปลงเป็น int แล้วผลลัพธ์เป็นจำนวนเต็ม?
เมื่อใช้ 3.0 ซึ่งเป็น float หรือ double ระบบจะคำนวณแบบ floating-point ทำให้สามารถเก็บค่าทศนิยมได้ เช่น 10 / 3.0 จะได้ 3.333...
แต่เมื่อแปลง 3.0 เป็น int เช่น (int)3.0 ระบบจะคำนวณแบบ integer division ซึ่งจะ ตัดเศษทิ้ง และให้ผลลัพธ์เป็นจำนวนเต็ม เช่น 10 / 3 จะได้แค่ 3 โดยไม่มี .333...

-นักศึกษาจะใช้การทำ Type Casting ในสถานการณ์ใดบ้างในการเขียนโปรแกรม?
วัตถุประสงค์ เช่น แปลง int เป็น float เพื่อให้การหารได้ค่าทศนิยมแทนจำนวนเต็ม, แปลงค่า float เป็น int เมื่อต้องการตัดเศษทศนิยมออกในการแสดงผลหรือจัดเก็บ, แปลงอักขระ char เป็นเลข ASCII เพื่อใช้วิเคราะห์หรือเปรียบเทียบค่ารหัส, ใช้ในการคำนวณที่มีชนิดข้อมูลต่างกันเพื่อให้ผลลัพธ์มีชนิดตรงกับที่ต้องการ หรือแปลงข้อมูลจากเซนเซอร์ที่เป็น float ให้เก็บในรูปแบบ int สำหรับฐานข้อมูลหรือการสื่อสารระหว่างระบบ ทั้งนี้ Type Casting ยังช่วยป้องกันข้อผิดพลาดหรือข้อมูลคลาดเคลื่อนจากการแปลงข้ามชนิดด้วย




