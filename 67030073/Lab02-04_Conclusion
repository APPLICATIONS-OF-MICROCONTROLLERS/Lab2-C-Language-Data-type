Lab02-04_Conclusion
สรุปผลการทดลอง
int, float, double, char, bool, byte และชนิดจำนวนเต็มอื่น ๆ มีขนาดและพฤติกรรมที่แตกต่างกันบน ESP32 โดยเฉพาะเรื่อง Type Casting ซึ่งมีบทบาทสำคัญในการควบคุมรูปแบบการคำนวณ เช่น การหารแบบทศนิยมหรือจำนวนเต็ม การแปลงข้อมูลระหว่างอักขระกับ ASCII รวมถึงการป้องกันการเกิด Overflow และการเลือกใช้ชนิดข้อมูลที่เหมาะสมกับขนาดของค่าที่ต้องการเก็บ เช่น การใช้ unsigned long long เมื่อจัดการกับค่าบวกขนาดใหญ่มาก ทั้งหมดนี้ช่วยเสริมความเข้าใจเชิงลึกเกี่ยวกับหน่วยความจำ ความแม่นยำ และพฤติกรรมของข้อมูลในระบบไมโครคอนโทรลเลอร์อย่างมีประสิทธิภาพ

คำถามท้ายการทดลอง
1. ความแตกต่างและคุณสมบัติของชนิดข้อมูลแต่ละประเภทบน ESP32
   int ขนาด 4 ไบต์ 32 บิต เก็บค่าจาก -2147483648 ถึง 2147483647
   float ขนาด 4 ไบต์ ความละเอียดประมาณ 7 ตำแหน่งทศนิยม
   double ขนาด 8 ไบต์ ความละเอียดถึง 15 ตำแหน่งทศนิยม
   char ขนาด 1 ไบต์ เก็บอักขระเดียวและมีค่าตัวเลข ASCII
   bool ขนาด 1 ไบต์ true เท่ากับ 1 false เท่ากับ 0
   long ขนาด 4 ไบต์ มีขอบเขตเท่ากับ int
   long long ขนาด 8 ไบต์ เก็บค่าจำนวนเต็มขนาดใหญ่
   unsigned int ขนาด 4 ไบต์ เก็บเฉพาะค่าบวก 0 ถึง 4294967295
   byte ขนาด 1 ไบต์ เก็บค่าบวก 0 ถึง 255 เท่านั้น

2. ความสำคัญของการเลือกใช้ชนิดข้อมูลที่เหมาะสม
   การเลือกชนิดข้อมูลที่เหมาะสมช่วยให้โปรแกรมทำงานได้มีประสิทธิภาพ ใช้หน่วยความจำอย่างเหมาะสม ลดการเกิด Overflow หรือ Underflow และลดข้อผิดพลาดในการคำนวณ นอกจากนี้ยังช่วยในการสื่อสารกับอุปกรณ์หรือฐานข้อมูลได้แม่นยำและปลอดภัยยิ่งขึ้น

3. ต้องการเก็บค่าเวลาเป็นมิลลิวินาทีที่มีค่าหลายพันล้าน
   ควรใช้ unsigned long หรือ unsigned long long
   unsigned long เก็บได้ถึง 4294967295 มิลลิวินาที ประมาณ 49.7 วัน
   unsigned long long เก็บได้มากกว่าหลายพันล้าน ประมาณหลายพันปี

4. ความแตกต่างระหว่าง float และ double
   float ใช้ 4 ไบต์ แม่นยำประมาณ 7 ตำแหน่งทศนิยม
   double ใช้ 8 ไบต์ แม่นยำสูงถึง 15 ตำแหน่งทศนิยม
   ดังนั้น double เหมาะกับงานที่ต้องการความละเอียดสูง เช่น ระบบนำทางหรือการวิเคราะห์ทางวิทยาศาสตร์ ส่วน float เหมาะกับงานทั่วไปที่ไม่ต้องการความแม่นยำสูง

5. แนวคิดเรื่อง Overflow และ Underflow พร้อมตัวอย่าง
   Overflow คือเมื่อค่ามากเกินขอบเขต เช่น byte x เท่ากับ 256 จะได้ค่าเป็น 0
   Underflow คือเมื่อค่าต่ำกว่าขอบเขต เช่น int x เท่ากับค่าต่ำสุดลบหนึ่ง จะได้ค่ากลับด้าน
   ตัวอย่างในงาน เช่น กำหนด byte เท่ากับ 256 แล้วแสดงผลเป็น 0 เพราะ 256 เกินขอบเขตของ byte

6. ประโยชน์ของการใช้ sizeof
   ฟังก์ชัน sizeof ช่วยให้รู้ว่าแต่ละตัวแปรใช้หน่วยความจำเท่าไร ซึ่งสำคัญมากในการเขียนโปรแกรมบนไมโครคอนโทรลเลอร์ที่มีหน่วยความจำจำกัด เช่น ESP32 เพราะจะช่วยให้เราวางแผนการใช้ข้อมูลได้อย่างมีประสิทธิภาพ และลดโอกาสที่โปรแกรมจะล่มหรือทำงานช้า
