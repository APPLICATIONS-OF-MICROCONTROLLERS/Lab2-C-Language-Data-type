## คำถามท้ายการทดลอง

1. นักศึกษาได้เรียนรู้อะไรบ้างเกี่ยวกับความแตกต่างและคุณสมบัติของชนิดข้อมูลแต่ละประเภทบน ESP32 (เช่น int, float, char, bool, long, long long, unsigned int, byte, double)
- นิดข้อมูลแต่ละชนิดมี ขนาดหน่วยความจำ และ ขอบเขตของค่าที่เก็บได้ แตกต่างกัน:
int และ long → ใช้ 4 ไบต์, เก็บได้ -2,147,483,648 ถึง 2,147,483,647
long long → 8 ไบต์, เก็บค่าขนาดใหญ่มาก
unsigned int → 4 ไบต์ ไม่มีค่าติดลบ
byte → 1 ไบต์, เก็บ 0–255
char → เก็บตัวอักษรหรือรหัส ASCII (1 ไบต์)
bool → เก็บ true/false เป็น 1/0
float → 4 ไบต์, ความแม่นยำ ~6-7 ทศนิยม
double → 8 ไบต์, ความแม่นยำ ~15 ทศนิยม
2. ความสำคัญของการเลือกใช้ชนิดข้อมูลที่เหมาะสมในการเขียนโปรแกรมคืออะไร?
- เพื่อ ประหยัดหน่วยความจำ (RAM/Flash) บน ESP32 ซึ่งมีจำกัด
- เพื่อให้สามารถเก็บข้อมูลได้อย่าง แม่นยำ และ ปลอดภัยจากการเกิด Overflow
- เพิ่ม ประสิทธิภาพในการทำงาน เช่น ใช้ byte แทน int เมื่อเก็บค่าระหว่าง 0-255
- ป้องกัน bug จากการแปลงชนิดข้อมูลผิดพลาด
3. ถ้านักศึกษาต้องการเก็บค่าเวลา (เป็นมิลลิวินาที) ซึ่งอาจมีค่าสูงถึงหลายพันล้านมิลลิวินาที นักศึกษาควรใช้ชนิดข้อมูลใดบน ESP32
- ใช้ unsigned long longเพราะสามารถเก็บค่าบวกได้ถึง 18,446,744,073,709,551,615
4. อธิบายความแตกต่างระหว่าง float และ double ในแง่ของขนาดหน่วยความจำและความแม่นยำ
- float ใช้หน่วยความจำ 4 ไบต์ เหมาะกับระบบที่หน่วยความจำจำกัด
- double ใช้ 8 ไบต์ แต่สามารถเก็บค่าที่แม่นยำกว่าและช่วงค่ากว้างกว่า
5. อธิบายแนวคิดเรื่อง "Overflow" และ "Underflow" ที่เกิดขึ้นกับชนิดข้อมูลจำนวนเต็ม (เช่น int, byte) พร้อมยกตัวอย่างจากใบงานนี้
Overflow: เมื่อค่าที่เก็บ เกินขอบเขตสูงสุด → ค่าจะ "วนกลับ" ไปยังค่าต่ำสุด เช่น
- int myInt = 2147483647 + 1; → แสดงผลเป็น -2147483648
Underflow: เมื่อค่าที่เก็บ ต่ำกว่าขอบเขตต่ำสุด → ค่าจะ "วนกลับ" ไปยังค่าสูงสุด เช่น
int myInt = -2147483648 - 1; → แสดงผลเป็น 2147483647
กรณีอื่นเช่น byte b = 256; → เกิด Overflow → กลับเป็น 0 (เพราะเก็บได้แค่ 0–255)
6. การทราบขนาดของชนิดข้อมูลด้วย sizeof() มีประโยชน์อย่างไรในการเขียนโปรแกรมสำหรับไมโครคอนโทรลเลอร์ที่มีหน่วยความจำจำกัด?
- ช่วยให้ เลือกชนิดข้อมูลได้เหมาะสม เพื่อไม่เปลืองหน่วยความจำ
- ป้องกัน การใช้หน่วยความจำเกิน ซึ่งอาจทำให้โปรแกรมทำงานผิดพลาด
- ช่วยในการออกแบบโครงสร้างข้อมูล เช่น struct, array
- ทำให้โปรแกรม มีประสิทธิภาพและเสถียร มากขึ้นบน ESP32
