คำถามท้ายการทดลอง

1.นักศึกษาได้เรียนรู้อะไรบ้างเกี่ยวกับความแตกต่างและคุณสมบัติของชนิดข้อมูลแต่ละประเภทบน ESP32 (เช่น int, float, char, bool, long, long long, unsigned int, byte, double)
ตอบ ได้เรียนรู้ว่าแต่ละชนิดข้อมูลมีขนาดและขอบเขตต่างกัน เช่นint และ long มีขนาด 4 ไบต์ (32-bit) และมีขอบเขตตั้งแต่ -2,147,483,648 ถึง 2,147,483,647
long long มีขนาด 8 ไบต์ รองรับค่าที่ใหญ่มากขึ้นfloat ใช้ 4 ไบต์ และมีความแม่นยำน้อยกว่า double ซึ่งใช้ 8 ไบต์
char ใช้ 1 ไบต์ในการเก็บอักขระ และสามารถแปลงเป็นค่า ASCII ได้ bool ใช้ 1 ไบต์ แสดงค่าเป็น 0 (false) หรือ 1 (true)
byte ใช้ 1 ไบต์ เก็บได้เฉพาะค่าระหว่าง 0 - 255 unsigned ใช้สำหรับค่าบวกเท่านั้น ทำให้ได้ช่วงค่ากว้างขึ้น

2.ความสำคัญของการเลือกใช้ชนิดข้อมูลที่เหมาะสมในการเขียนโปรแกรมคืออะไร?
ตอบ เพื่อลดการใช้หน่วยความจำโดยไม่จำเป็น และเพิ่มประสิทธิภาพของโปรแกรม โดยเฉพาะในไมโครคอนโทรลเลอร์ที่มีหน่วยความจำจำกัด เช่น หากไม่ต้องใช้ค่าติดลบก็ควรใช้ unsigned หรือถ้าเก็บค่าขนาดเล็กควรใช้ byte แทน int


3.ถ้านักศึกษาต้องการเก็บค่าเวลา (เป็นมิลลิวินาที) ซึ่งอาจมีค่าสูงถึงหลายพันล้านมิลลิวินาที นักศึกษาควรใช้ชนิดข้อมูลใดบน ESP32
ตอบ ควรใช้ unsigned long (32-bit) หากค่าไม่เกิน ~4,294,967,295 หรือใช้ unsigned long long (64-bit) ถ้าค่ามีโอกาสเกินช่วงนั้น

4.อธิบายความแตกต่างระหว่าง float และ double ในแง่ของขนาดหน่วยความจำและความแม่นยำ
ตอบ float ใช้ 4 ไบต์ (32-bit) รองรับทศนิยมประมาณ 6-7 ตำแหน่ง
double ใช้ 8 ไบต์ (64-bit) รองรับทศนิยมประมาณ 15-16 ตำแหน่ง
ดังนั้น double มีความแม่นยำและช่วงค่าที่มากกว่า เหมาะสำหรับการคำนวณที่ต้องการความละเอียดสูง

5.อธิบายแนวคิดเรื่อง "Overflow" และ "Underflow" ที่เกิดขึ้นกับชนิดข้อมูลจำนวนเต็ม (เช่น int, byte) พร้อมยกตัวอย่างจากใบงานนี้
ตอบ Overflow คือการที่ค่ามากกว่าค่าสูงสุดที่ตัวแปรรับได้ เช่น int เก็บได้สูงสุด 2,147,483,647 ถ้าเก็บ 2147483647 + 1 จะเกิด Overflow และค่าจะวนไปที่ติดลบ (-2,147,483,648)
Underflow คือการที่ค่าต่ำกว่าค่าต่ำสุด เช่น byte เก็บค่าระหว่าง 0-255 ถ้าเก็บค่า 256 จะวนกลับไปเป็น 0

6.การทราบขนาดของชนิดข้อมูลด้วย sizeof()มีประโยชน์อย่างไรในการเขียนโปรแกรมสำหรับไมโครคอนโทรลเลอร์ที่มีหน่วยความจำจำกัด
ตอบ ช่วยให้สามารถเลือกใช้ชนิดข้อมูลที่เหมาะสมกับหน่วยความจำที่มีอยู่ เช่น การใช้ byte แทน int 
หากต้องเก็บค่าระหว่าง 0-255 ช่วยลดการใช้ RAM และ Flash ซึ่งสำคัญมากในระบบฝังตัวที่มีข้อจำกัดด้านทรัพยากร


